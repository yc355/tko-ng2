{"version":3,"file":"fighter-search.component.js","sourceRoot":"","sources":["fighter-search.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAGlD,uCAA4C,0BAA0B,CAAC,CAAA;AAUvE;IAME,gCAAoB,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;QAFvD,cAAS,GAAY,KAAK,CAAC;IAE+B,CAAC;IAElE,yCAAQ,GAAR,cAAa,CAAC;IAEd,yCAAQ,GAAR,UAAS,KAAa;QAAtB,iBAiBC;QAhBC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,KAAK,CAAC;iBACxC,SAAS,CAAC,UAAA,QAAQ;gBAAK,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;oBACrC,KAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;gBACzB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBACvB,KAAI,CAAC,eAAe,GAAG,oBAAoB,CAAA;gBAC7C,CAAC;YAAA,CAAC,EACf,UAAA,KAAK;gBAAK,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,KAAI,CAAC,eAAe,GAAG,oBAAoB,CAAA;YAAA,CAAC,EACtD,cAAO,KAAI,CAAC,SAAS,GAAG,KAAK,CAAA,CAAA,CAAC,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAnCH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,gBAAgB;YAC1B,WAAW,EAAE,+BAA+B;YAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;YAC3C,SAAS,EAAE,CAAC,6CAAoB,CAAC;SAClC,CAAC;;8BAAA;IA8BF,6BAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,8BAAsB,yBA4BlC,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Http, Response }    from '@angular/http';\nimport { Observable }        from 'rxjs/Observable';\nimport { FighterSearchService }        from './fighter-search.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'fighter-search',\n  templateUrl: 'fighter-search.component.html',\n  styleUrls: ['fighter-search.component.css'],\n  providers: [FighterSearchService]\n})\n\nexport class FighterSearchComponent implements OnInit {\n  public query: string;\n  public result: {};\n  public notFoundMessage: string;\n  public searching: boolean = false;\n\n  constructor(private fighterSearchService: FighterSearchService) {}\n\n  ngOnInit() { }\n\n  onSearch(query: string) {\n    if (this.searching == false) {\n      this.query = query;\n      this.searching = true;\n      this.notFoundMessage = null;\n      this.result = null;\n      this.fighterSearchService.getFighter(query)\n        .subscribe(response => {if(Object.keys(response).length != 0) {\n                                  this.result = response;\n                                } else {\n                                  this.searching = false;\n                                  this.notFoundMessage = 'Fighter not found.'\n                                }},\n                   error => {this.searching = false;\n                             this.notFoundMessage = 'Fighter not found.'},\n                   () => {this.searching = false});\n    }\n  }\n}\n"]}